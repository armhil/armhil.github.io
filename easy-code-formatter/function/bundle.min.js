var AddinFunctions = (function (exports) {
    'use strict';

    const LoggingUtils = {
        Trace: function (key) {
            // Don't log if we're in localhost.
            if (window.location.hostname.indexOf('localhost') >= 0)
                return;
            // Check if app insights is available, if yes, track event.
            if (window.appInsights && window.appInsights.trackEvent) {
                window.appInsights.trackEvent({ name: key });
            }
        }
    };

    const Default = {
        /** Display name */
        DisplayName: 'Default',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: '008'
            },
            Comment: {
                Color: '800'
            },
            Plaintext: {
                Color: '000'
            },
            Punctuation: {
                Color: '660'
            },
            String: {
                Color: '080'
            },
            Literal: {
                Color: '066'
            },
            Type: {
                Color: '606'
            }
        },
        // Background color
        BackgroundStyle: {},
        // Line number background colors
        LineNumberStyle: {
            Background: 'none'
        }
    };

    const DefaultGray = {
        /** Display name */
        DisplayName: 'Default (with Gray background)',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: '008'
            },
            Comment: {
                Color: '800'
            },
            Plaintext: {
                Color: '000'
            },
            Punctuation: {
                Color: '660'
            },
            String: {
                Color: '080'
            },
            Literal: {
                Color: '066'
            },
            Type: {
                Color: '606'
            }
        },
        // Background color
        BackgroundStyle: {
            BackgroundColor: 'ececec'
        },
        // Line number background colors
        LineNumberStyle: {
            Background: 'none'
        }
    };

    const Desert = {
        /** Display name */
        DisplayName: 'Desert',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: 'f0e68c'
            },
            Comment: {
                Color: '87ceeb'
            },
            Plaintext: {
                Color: 'fff'
            },
            Punctuation: {
                Color: 'fff'
            },
            String: {
                Color: 'ffa0a0'
            },
            Literal: {
                Color: 'cd5c5c'
            },
            Type: {
                Color: '98fb98'
            },
            Tag: {
                Color: 'f0e68c'
            },
            AttributeName: {
                Color: 'bdb76b',
                FontWeight: 'bold'
            },
            AttributeValue: {
                Color: 'ffa0a0'
            },
            Decimal: {
                Color: '98fb98'
            },
            NoCode: {
                Color: '000',
                BackgroundColor: 'none'
            }
        },
        // Background color
        BackgroundStyle: {
            BackgroundColor: '333'
        },
        // Line number background colors
        LineNumberStyle: {
            Color: 'fff',
            Background: 'none'
        }
    };

    const Sunburst = {
        /** Display name */
        DisplayName: 'Sunburst',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: 'e28964'
            },
            Comment: {
                Color: 'aeaeae',
                FontStyle: 'italic'
            },
            Plaintext: {
                Color: 'fff'
            },
            Punctuation: {
                Color: 'fff'
            },
            String: {
                Color: '65b042'
            },
            Literal: {
                Color: 'cd5c5c'
            },
            Type: {
                Color: '89bdff'
            },
            Tag: {
                Color: '89bdff'
            },
            AttributeName: {
                Color: 'bdb76b'
            },
            AttributeValue: {
                Color: '65b042'
            },
            Decimal: {
                Color: '3387cc'
            },
            NoCode: {
                Color: '000',
                BackgroundColor: 'none'
            }
        },
        // Background color
        BackgroundStyle: {
            BackgroundColor: '000'
        },
        // Line number background colors
        LineNumberStyle: {
            Color: 'fff',
            Background: 'none'
        }
    };

    const A11YDark = {
        /** Display name */
        DisplayName: 'A11YDark',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: 'dcc6e0',
            },
            Comment: {
                Color: 'd4d0ab'
            },
            Plaintext: {
                Color: 'fff',
            },
            Punctuation: {
                Color: 'fff'
            },
            String: {
                Color: 'abe338'
            },
            Literal: {
                Color: 'f5ab35'
            },
            Type: {
                Color: '00e0e0'
            },
            Tag: {
                Color: '00e0e0'
            },
            AttributeName: {
                Color: 'ffd700',
                FontWeight: 'bold'
            },
            AttributeValue: {
                Color: 'abe338'
            },
            Decimal: {
                Color: 'f5ab35',
            },
            NoCode: {
                Color: '000',
                BackgroundColor: 'none'
            }
        },
        // Background color
        BackgroundStyle: {
            BackgroundColor: '2b2b2b'
        },
        // Line number background colors
        LineNumberStyle: {
            Color: 'fff',
            Background: 'none'
        }
    };

    const A11YLight = {
        /** Display name */
        DisplayName: 'A11YLight',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: '7928a1'
            },
            Comment: {
                Color: '696969'
            },
            Plaintext: {
                Color: '545454'
            },
            Punctuation: {
                Color: '545454'
            },
            String: {
                Color: '008000'
            },
            Literal: {
                Color: 'aa5d00'
            },
            Type: {
                Color: '007faa'
            },
            Tag: {
                Color: '007faa'
            },
            AttributeName: {
                Color: 'aa5d00',
                FontWeight: 'bold'
            },
            AttributeValue: {
                Color: '008000'
            },
            Decimal: {
                Color: 'aa5d00'
            },
            NoCode: {
                Color: '000',
                BackgroundColor: 'none'
            }
        },
        // Background color
        BackgroundStyle: {
            BackgroundColor: 'fefefe'
        },
        // Line number background colors
        LineNumberStyle: {
            Color: '000',
            Background: 'none'
        }
    };

    const AtelierCaveLight = {
        /** Display name */
        DisplayName: 'Atelier Cave Light',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: '955ae7'
            },
            Comment: {
                Color: '7e7887'
            },
            Plaintext: {
                Color: 'aa573c'
            },
            Punctuation: {
                Color: '8b8792'
            },
            String: {
                Color: '2a9292'
            },
            Literal: {
                Color: 'c07156'
            },
            Type: {
                Color: '576ddb'
            },
            Tag: {
                Color: 'be4678'
            },
            AttributeName: {
                Color: '759731',
                FontWeight: 'bold'
            },
            AttributeValue: {
                Color: 'be4678'
            },
            Decimal: {
                Color: 'aa573c'
            },
            NoCode: {
                Color: '576ddb',
                BackgroundColor: 'none'
            }
        },
        // Background color
        BackgroundStyle: {
            BackgroundColor: 'efecf4'
        },
        // Line number background colors
        LineNumberStyle: {
            Color: 'aeb0b3',
            Background: 'none'
        }
    };

    const AtelierCaveDark = {
        /** Display name */
        DisplayName: 'Atelier Cave Dark',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: '955ae7'
            },
            Comment: {
                Color: '7e7887'
            },
            Plaintext: {
                Color: '333333'
            },
            Punctuation: {
                Color: '333333'
            },
            String: {
                Color: '2a9292'
            },
            Literal: {
                Color: 'c07156'
            },
            Type: {
                Color: 'aa573c'
            },
            Tag: {
                Color: 'be4678'
            },
            AttributeName: {
                Color: '759731',
                FontWeight: 'bold'
            },
            AttributeValue: {
                Color: 'be4678'
            },
            Decimal: {
                Color: 'aa573c'
            },
            NoCode: {
                Color: '576ddb',
                BackgroundColor: 'none'
            }
        },
        // Background color
        BackgroundStyle: {
            BackgroundColor: '19171c'
        },
        // Line number background colors
        LineNumberStyle: {
            Color: 'aeb0b3',
            Background: 'none'
        }
    };

    const BlueHintGray = {
        /** Display name */
        DisplayName: 'Blue Hint Gray',
        /** Code styles */
        CodeStyles: {
            Keyword: {
                Color: '0000ff'
            },
            Comment: {
                Color: '008000'
            },
            Plaintext: {
                Color: '000'
            },
            Punctuation: {
                Color: '000'
            },
            String: {
                Color: 'a31515'
            },
            Literal: {
                Color: '066'
            },
            Type: {
                Color: '2b91af'
            },
            Tag: {
                Color: '2b91af'
            },
        },
        // Background color
        BackgroundStyle: {
            BackgroundColor: 'eaeaea'
        },
        // Line number background colors
        LineNumberStyle: {
            Background: 'none'
        }
    };

    function MergeStyleProperties(object) {
        if (!object || !Object.keys(object)) {
            return "";
        }
        const styleNameMap = {
            'Color': 'color:#',
            'Background': 'background:',
            'BackgroundColor': 'background-color:',
            'FontWeight': 'font-weight:',
            'FontStyle': 'font-style:'
        };
        return Object.keys(object).reduce((p, c) => {
            if ((c === 'BackgroundColor' || c === 'Background') && object[c] !== 'none') {
                return `${p}${styleNameMap[c]}#${object[c]};`;
            }
            return `${p}${styleNameMap[c]}${object[c]};`;
        }, "");
    }
    const Themes = {
        Default,
        DefaultGray,
        Desert,
        Sunburst,
        A11YDark,
        A11YLight,
        AtelierCaveLight,
        AtelierCaveDark,
        BlueHintGray
    };
    function GetLineNumberStyle(theme) {
        if (!Themes[theme]) {
            return "";
        }
        return MergeStyleProperties(Themes[theme].LineNumberStyle);
    }
    function GetBackgroundStyle(theme) {
        if (!Themes[theme]) {
            return "";
        }
        return MergeStyleProperties(Themes[theme].BackgroundStyle);
    }
    /**
     * Returns a CSS style string for code references
     * @param theme Defined theme we're getting the style for
     * @param styleName Style name of the code snippet (ex: Keyword vs Punctuation)
     * @returns string
     */
    function GetGenericStyle(theme, styleName) {
        if (!Themes[theme]) {
            return "";
        }
        return MergeStyleProperties(Themes[theme].CodeStyles[styleName]);
    }

    /**
     * theme-utils.js
     * 
     * A simple utility function for handling themes, meant to be shared between the function
     * and the taskpane app.
     */

    function GetTheme(theme) {

    	if (!Themes[theme]) throw new Error("Theme doesn't exist");

    	var lineStyles = {};
    	for (var i = 0; i < 10; i++) {
    		lineStyles['class="L'+i+'"'] = `style="${GetLineNumberStyle(theme)}"`;
    	}

    	const codeStyles = {
    		'class="kwd"' : `style="${GetGenericStyle(theme, 'Keyword')}"`,
    		'class="pun"' : `style="${GetGenericStyle(theme, 'Punctuation')}"`,
    		'class="pln"' : `style="${GetGenericStyle(theme, 'Plaintext')}"`,
    		'class="str"' : `style="${GetGenericStyle(theme, 'String')}"`,
    		'class="lit"' : `style="${GetGenericStyle(theme, 'Literal')}"`,
    		'class="typ"' : `style="${GetGenericStyle(theme, 'Type')}"`,
    		'class="com"' : `style="${GetGenericStyle(theme, 'Comment')}"`,
    		'class="tag"' : `style="${GetGenericStyle(theme, 'Tag')}"`,
    		'class="atn"' : `style="${GetGenericStyle(theme, 'AttributeName')}"`,
    		'class="atv"' : `style="${GetGenericStyle(theme, 'AttributeValue')}"`,
    		'class="dec"' : `style="${GetGenericStyle(theme, 'Decimal')}"`,
    		'class="nocode"' : `style="${GetGenericStyle(theme, 'NoCode')}"`,
    	};

    	var result = {};
    	Object.keys(lineStyles).forEach(function(k) {
    		result[k] = lineStyles[k];
    	});

    	Object.keys(codeStyles).forEach(function(k) {
    		result[k] = codeStyles[k];
    	});

    	return result;
    }

    /**
     * code-utils.js
     * 
     * Codifies a selected text.
     */

    const CodeUtils = {

    /**
     * Codify the text
     * @param {string} string to codify
     * @param {theme} string theme to match from the easy code formatter styles
     * @param {boolean} boolean render the line numbers
     */
    CodifyText: function(text, theme, fontFamily, fontSize, renderLineNumbers) {
      text = text.replaceAll('>', '&gt;');
      text = text.replaceAll('<', '&lt;');
      var prettified = window.PR.prettyPrintOne(text, undefined, true);

      const styles = GetTheme(theme);
      fontFamily = 'font-family:' + fontFamily + ';';
      fontSize = 'font-size:' + fontSize + 'px;';
      Object.keys(styles).forEach(function(key) {
        prettified = prettified.replaceAll(key, styles[key]);
      });

      prettified = prettified.replaceAll('<ol class="linenums">', '<div>');
      prettified = prettified.replaceAll('</ol>', '</div>');
      prettified = prettified.replaceAll('</li>', '</p>');
      if (!renderLineNumbers) {
        prettified = prettified.replaceAll(
        `<li style="${GetLineNumberStyle(theme)}">`,
        `<p style="background:none;margin-top:0px;margin-bottom:0px;${GetLineNumberStyle(theme)}${fontFamily}${fontSize}">`);
      }
      else {
        prettified = prettified.split(`<li style="${GetLineNumberStyle(theme)}">`);
        const lineNumberFormat = (i) => `${' '.repeat((prettified.length-1).toString().length-i.toString().length)}${i}. `;
        prettified = prettified
          .map((t, i) => {
            if (i == 0) return t;
            return `<p style="background:none;margin-top:0px;margin-bottom:0px;${GetLineNumberStyle(theme)}${fontFamily}${fontSize}">${lineNumberFormat(i)}${t}`;
          }).join('');
      }

      const finalHTMLOpen = '<pre style="padding: 2px;border: 1px solid #888;'+GetBackgroundStyle(theme)+'">'+prettified+'</pre>';
      return finalHTMLOpen;
    },

    	/**
    	 * Highlights a chunk of HTML
    	 * @param {html} htmlPart - A part of html which needs to be added the classes.
    	 * @param {bool} isRectangle - If it's rectangle.
    	 * @param {string hex} colorCode - Color code.
    	 */
    	HighlightHtml: function (htmlPart, isRectangle, colorCode, isMock) {
    		if (isMock) {
    			if (isRectangle) {
    				htmlPart = '<div style="border: 1px solid #'+colorCode+'">'+htmlPart+'</div>';
    			}
    			else {
    				htmlPart = '<div style="background: #'+colorCode+'">'+htmlPart+'</div>';
    			}
    		}
    		else {
    			if (isRectangle) {
    				htmlPart = '<span style="border: 1px solid #'+colorCode+'">'+htmlPart+'</span>';
    			}
    			else {
    				htmlPart = '<span style="background: #'+colorCode+'">'+htmlPart+'</span>';
    			}
    		}

    		return htmlPart;
    	}
    };

    const EnvironmentUtils = {
        // If we're in an office add-in
        IsOffice: function () {
            return !!(window.Office && window.Office.context && window.Office.context.document);
        },
        // If we're in g-suite
        IsGsuite: function () {
            return !!(window.google && window.google.script && window.google.script.run);
        },
        // Is localhost?
        IsLocalhost: function () {
            return (window.location.hostname.indexOf('localhost') >= 0);
        }
    };

    const LoggingUtils$1 = {
        Trace: function (key) {
            // Don't log if we're in localhost.
            if (window.location.hostname.indexOf('localhost') >= 0)
                return;
            // Check if app insights is available, if yes, track event.
            if (window.appInsights && window.appInsights.trackEvent) {
                window.appInsights.trackEvent({ name: key });
            }
        }
    };

    /**
     * addin-utils.js
     * 
     * A specific util class for this add-in.
     */

    // Theme storage key
    const theme = 'theme';
    // Lines storage key
    const lines = 'lines';
    // Color storage key (for highlighting)
    const color = 'color';
    // Is rectangle storage key
    const rectangle = 'rectangle';
    // Font name
    const fontName = 'fontName';
    // Font size
    const fontSize = 'fontSize';
    // Add-in utils
    const AddinUtils = {
      // Initialize the addin.
      Initialize: function(route) {
        // We're in localhost 
        if (EnvironmentUtils.IsLocalhost()) {
          window.location.hash = route;
        }
        // G-suite Apps / Google Docs
        else if (EnvironmentUtils.IsGsuite()) {
          window.location.hash = route;
        }
        // Microsoft Office
        else {
          window.Office.initialize = function() {
            window.location.hash = route;
          };
        }
      },
      InsertText: function(text) {
        if (EnvironmentUtils.IsLocalhost()) {
          // Do nothing
          console.log('>>> AddinUtils.InsertText invoked with ', text);
        }
        else if (EnvironmentUtils.IsGsuite()) {
          window.google.script.run.insertPlainText(text);
        }
        else {
          window.Office.context.document.setSelectedDataAsync(text, function(){});
        }
      },
      // Return the saved theme if any for the document.
      GetSavedTheme: function() {
        return localStorage.getItem(theme) || 'Default';
      },
      SetFontName: function(font) {
        localStorage.setItem(fontName, font);
      },
      GetSavedFontName: function() {
        return localStorage.getItem(fontName) || 'Consolas';
      },
      SetFontSize: function(size) {
        localStorage.setItem(fontSize, size);
      },
      GetSavedFontSize: function() { 
        return localStorage.getItem(fontSize) || "11";
      },
      SetTheme: function(value) {
        localStorage.setItem(theme, value);
      },
      GetSavedLineRenderingSetting: function() {
        const renderLines = localStorage.getItem(lines);
        if (renderLines === undefined || renderLines === null) {
          return true;
        }

        return renderLines === 'true';
      },
      SetLineRenderingSetting: function(value) {
        localStorage.setItem(lines, value);
      },
      GetSavedColor: function() {
        return localStorage.getItem(color) || '#39FF14';
      },
      SetColor: function(value) {
        localStorage.setItem(color, value);
      },
      GetIsRectangle: function() {
        const value = localStorage.getItem(rectangle);
        if (value === undefined || value === null) {
          return false;
        }

        return value === 'true';
      },
      SetIsRectangle: function(value) {
        localStorage.setItem(rectangle, value);
      },
      TryCodifying: function() {
        LoggingUtils$1.Trace('ecf-trycodify');
        if (EnvironmentUtils.IsLocalhost()) {
          // Do nothing
          console.log('localhost invocation: AddinUtils.TryCodifying invoked');
        }
        else if (EnvironmentUtils.IsGsuite()) {
          window.google.script.run
          .withFailureHandler(
            function(p1, p2) {
              console.log('params from onFailure', p1, p2);
            }
          )
          .withSuccessHandler(
            function onSuccess(text){
              var prettifiedText =
                CodeUtils.CodifyText(
                  text,
                  AddinUtils.GetSavedTheme(),
                  AddinUtils.GetSavedFontName(),
                  AddinUtils.GetSavedFontSize(),
                  AddinUtils.GetSavedLineRenderingSetting());
              // handle the empty content exception from google XML parser
              prettifiedText = prettifiedText.replaceAll('&nbsp;', '');
              window.google.script.run.insertCode(prettifiedText, false, AddinUtils.GetSavedFontName(), AddinUtils.GetSavedFontSize());
            })
          .getSelectedText();
        }
        else {
          // Get the selected data as text
          // API reference for method:
          // https://docs.microsoft.com/en-us/javascript/api/office/office.document?view=word-js-preview#getselecteddataasync-coerciontype--options--callback-
          window.Office.context.document.getSelectedDataAsync(window.Office.CoercionType.Text, function (asyncResult) {

            // If the retrieval result is failed - insert the text as error message.
            // API reference for enums: https://docs.microsoft.com/en-us/javascript/api/office/office.asyncresultstatus?view=word-js-preview
            if (asyncResult.status === window.Office.AsyncResultStatus.Failed) {
              InsertErrorMessage(asyncResult.error.message);
            }
            else {
              // Weird behaviour with the last line - special case.
              var loadedText = asyncResult.value;
              if (loadedText[loadedText.length-1] !== '\n') {
                loadedText+= '\n\n';
              }

              const prettifiedHTMLText = CodeUtils.CodifyText(
                loadedText,
                AddinUtils.GetSavedTheme(), // saved theme setting
                AddinUtils.GetSavedFontName(),
                AddinUtils.GetSavedFontSize(),
                AddinUtils.GetSavedLineRenderingSetting()); // saved line number rendering setting

              if (prettifiedHTMLText) {
                window.Office.context.document.setSelectedDataAsync(prettifiedHTMLText, {coercionType: window.Office.CoercionType.Html},
                  function (asyncResult) {
                    if (asyncResult.status === window.Office.AsyncResultStatus.Failed) {
                      InsertErrorMessage(asyncResult.error.message);
                    }
                  });
              }
              else {
                InsertErrorMessage("Prettified text wasn't found");
              }
            }
          });
        }
      },

      // Try highlighting
      TryHighlighting: function() {

        LoggingUtils$1.Trace('ecf-tryhighlight');

        // Get the selected data as text
        // API reference for method:
        // https://docs.microsoft.com/en-us/javascript/api/office/office.document?view=word-js-preview#getselecteddataasync-coerciontype--options--callback-
        window.Office.context.document.getSelectedDataAsync(window.Office.CoercionType.Text, function (asyncResult) {
          // If the retrieval result is failed - insert the text as error message.
          // API reference for enums: https://docs.microsoft.com/en-us/javascript/api/office/office.asyncresultstatus?view=word-js-preview
          if (asyncResult.status === window.Office.AsyncResultStatus.Failed) {
            InsertErrorMessage(asyncResult.error.message);
          }
          else {
            var loadedText = asyncResult.value;

            loadedText = loadedText.replaceAll('>', '&gt;');
            loadedText = loadedText.replaceAll('<', '&lt;');

            const prettifiedHTMLText = CodeUtils.CodifyText(
              loadedText,
              AddinUtils.GetSavedTheme(), // saved theme setting
              AddinUtils.GetSavedFontName(),
              AddinUtils.GetSavedFontSize(),
              false); // explicitly false, line number shouldn't be added for this.

            const highlightedHTML = CodeUtils.HighlightHtml(
              prettifiedHTMLText,
              AddinUtils.GetIsRectangle(), // saved theme setting
              AddinUtils.GetSavedColor()); // saved line number rendering setting

            if (highlightedHTML) {
              window.Office.context.document.setSelectedDataAsync(highlightedHTML, {coercionType: window.Office.CoercionType.Html},
                function (asyncResult) {
                  if (asyncResult.status === window.Office.AsyncResultStatus.Failed) {
                    InsertErrorMessage(asyncResult.error.message);
                  }
                });
            }
            else {
              InsertErrorMessage("Prettified text wasn't found");
            }
          }
        });
      },

      /**
       * Insert a parameterized error message
       * @param {value} string error value
       */
      InsertErrorMessage: function(value) {
          window.Office.context.document.setSelectedDataAsync(
            "Something went wrong and we couldn't format your code. (Or we think we couldn't.)"+
            "Please contact the developer at arman.hilmioglu@gmail.com along with the description / or a screenshot." +
            "It would be great if you can send us the error message with a screenshot. Your error: "+value);
      }
    };

    function CodifyText(event) {
    	LoggingUtils.Trace('ecf-function-codify');
    	AddinUtils.TryCodifying();
    	event.completed();
    	return;
    }

    function HighlightHtml(event) {
    	LoggingUtils.Trace('ecf-function-highlight');
    	AddinUtils.TryHighlighting();
    	event.completed();
    	return;
    }

    exports.CodifyText = CodifyText;
    exports.HighlightHtml = HighlightHtml;

    return exports;

}({}));
